package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"errors"
	"fmt"
	"opentaxi/database/auth/roles"
	"opentaxi/database/auth/rolpermiso"
	"opentaxi/database/auth/usuarios"
	"opentaxi/database/auth/xauth"
	"opentaxi/graph/model"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, username string, password string) ([]*model.Rol, error) {
	return xauth.Login(ctx, r.DB, username, password)
}

// UseRol is the resolver for the useRol field.
func (r *mutationResolver) UseRol(ctx context.Context, username string, password string, rol string) (*model.UsuarioLogin, error) {
	return xauth.UseRol(ctx, r.DB, username, password, rol)
}

// CreateUsuario is the resolver for the createUsuario field.
func (r *mutationResolver) CreateUsuario(ctx context.Context, input model.NewUsuario) (*model.Usuario, error) {
	data, err := xauth.CtxValue(ctx, r.DB, "createUsuario")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return usuarios.Crear(r.DB, input)
}

// UpdateUsuario is the resolver for the updateUsuario field.
func (r *mutationResolver) UpdateUsuario(ctx context.Context, input model.UpdateUsuario) (*model.Usuario, error) {
	data, err := xauth.CtxValue(ctx, r.DB, "updateUsuario")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return usuarios.Update(r.DB, input)
}

// CreateRol is the resolver for the createRol field.
func (r *mutationResolver) CreateRol(ctx context.Context, input model.NewRol) (*model.Rol, error) {
	data, err := xauth.CtxValue(ctx, r.DB, "createRol")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return roles.Crear(r.DB, input)
}

// DeleteRol is the resolver for the deleteRol field.
func (r *mutationResolver) DeleteRol(ctx context.Context, rol string) (bool, error) {
	data, err := xauth.CtxValue(ctx, r.DB, "deleteRol")
	if data == nil {
		return false, errors.New(err.Error())
	}
	return roles.Eliminar(r.DB, rol)
}

// ModificarRol is the resolver for the modificarRol field.
func (r *mutationResolver) ModificarRol(ctx context.Context, input model.NewRol) (*model.Rol, error) {
	data, err := xauth.CtxValue(ctx, r.DB, "modificarRol")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return roles.Modificar(r.DB, input)
}

// CrearNuevoPermiso is the resolver for the crearNuevoPermiso field.
func (r *mutationResolver) CrearNuevoPermiso(ctx context.Context, input model.NewRolPermiso) (*model.RolPermiso, error) {
	data, err := xauth.CtxValue(ctx, r.DB, "crearNuevoPermiso")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return rolpermiso.CrearNuevoPermiso(r.DB, input)
}

// EliminarPermiso is the resolver for the eliminarPermiso field.
func (r *mutationResolver) EliminarPermiso(ctx context.Context, metodo string) (bool, error) {
	data, err := xauth.CtxValue(ctx, r.DB, "eliminarPermiso")
	if data == nil {
		return false, errors.New(err.Error())
	}
	return rolpermiso.EliminarPermiso(r.DB, metodo)
}

// ActualizarPermiso is the resolver for the actualizarPermiso field.
func (r *mutationResolver) ActualizarPermiso(ctx context.Context, input model.NewRolPermiso) (*model.RolPermiso, error) {
	data, err := xauth.CtxValue(ctx, r.DB, "actualizarPermiso")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return rolpermiso.ActualizarPermiso(r.DB, input)
}

// UsuarioByUsername is the resolver for the usuarioByUsername field.
func (r *queryResolver) UsuarioByUsername(ctx context.Context, username string) (*model.Usuario, error) {
	data, err := xauth.CtxValue(ctx, r.DB, "usuarioByUsername")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	return usuarios.UsuarioByUsername(r.DB, username)
}

// Permisos is the resolver for the permisos field.
func (r *queryResolver) Permisos(ctx context.Context) ([]*model.RolPermiso, error) {
	panic(fmt.Errorf("not implemented: Permisos - permisos"))
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context) ([]*model.Rol, error) {
	data, err := xauth.CtxValue(ctx, r.DB, "roles")
	if data == nil {
		return nil, errors.New(err.Error())
	}
	panic(fmt.Errorf("not implemented: Roles - roles"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
